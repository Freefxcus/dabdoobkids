{"ast":null,"code":"import{createApi,fetchBaseQuery}from\"@reduxjs/toolkit/query/react\";import{baseUrl}from\"../utils/baseUrl\";const backendUrl=baseUrl.production;const cartApi=createApi({reducerPath:\"cartItems\",baseQuery:fetchBaseQuery({baseUrl:`${process.env.REACT_APP_BASE_URL}`,prepareHeaders:headers=>{// Do something before request is sent\nif(localStorage.getItem(\"access_token\")){headers.set(\"Authorization\",`Bearer ${localStorage.getItem(\"access_token\")}`);}return headers;}}),endpoints:builder=>({getAllCarts:builder.query({query:()=>`${backendUrl}/cart`,providesTags:[\"cartItems\"]}),deleteFromCart:builder.mutation({query:id=>({url:`${backendUrl}/cart/${id}`,method:\"DELETE\"}),invalidatesTags:[\"cartItems\"]}),deleteAllCart:builder.mutation({query:()=>({url:`${backendUrl}/cart/`,method:\"DELETE\"}),invalidatesTags:[\"cartItems\"]}),updateQuantity:builder.mutation({query:payload=>({url:`${backendUrl}/cart/${payload.id}`,method:\"PUT\",body:{count:payload.count}}),invalidatesTags:[\"cartItems\"]}),addToCart:builder.mutation({query:payload=>({url:`${backendUrl}/cart/`,body:{items:payload},method:\"POST\"}),invalidatesTags:[\"cartItems\"]})})});// export const { useGetAllCartsQuery, useLazyGetAllCartsQuery, useUpdateQuantityMutation } = cartApi;\n// }),\n// });\nexport const{useGetAllCartsQuery,useLazyGetAllCartsQuery,useAddToCartMutation,useDeleteFromCartMutation,useDeleteAllCartMutation,useUpdateQuantityMutation// useClearCartMutation,\n// useVerifyCartMutation,\n}=cartApi;export default cartApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","baseUrl","backendUrl","production","cartApi","reducerPath","baseQuery","process","env","REACT_APP_BASE_URL","prepareHeaders","headers","localStorage","getItem","set","endpoints","builder","getAllCarts","query","providesTags","deleteFromCart","mutation","id","url","method","invalidatesTags","deleteAllCart","updateQuantity","payload","body","count","addToCart","items","useGetAllCartsQuery","useLazyGetAllCartsQuery","useAddToCartMutation","useDeleteFromCartMutation","useDeleteAllCartMutation","useUpdateQuantityMutation"],"sources":["/var/www/production/portal/src/Redux/cartApi.jsx"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n\r\nimport { baseUrl } from \"../utils/baseUrl\";\r\n\r\nconst backendUrl = baseUrl.production;\r\n\r\nconst cartApi = createApi({\r\n  reducerPath: \"cartItems\",\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: `${process.env.REACT_APP_BASE_URL}`,\r\n    prepareHeaders: (headers) => {\r\n      // Do something before request is sent\r\n      if (localStorage.getItem(\"access_token\")) {\r\n        headers.set(\r\n          \"Authorization\",\r\n          `Bearer ${localStorage.getItem(\"access_token\")}`\r\n        );\r\n      }\r\n\r\n      return headers;\r\n    },\r\n  }),\r\n  endpoints: (builder) => ({\r\n    getAllCarts: builder.query({\r\n      query: () => `${backendUrl}/cart`,\r\n      providesTags: [\"cartItems\"],\r\n    }),\r\n\r\n    deleteFromCart: builder.mutation({\r\n      query: (id) => ({\r\n        url: `${backendUrl}/cart/${id}`,\r\n        method: \"DELETE\",\r\n      }),\r\n      invalidatesTags: [\"cartItems\"],\r\n    }),\r\n    deleteAllCart: builder.mutation({\r\n      query: () => ({\r\n        url: `${backendUrl}/cart/`,\r\n        method: \"DELETE\",\r\n      }),\r\n      invalidatesTags: [\"cartItems\"],\r\n    }),\r\n    updateQuantity: builder.mutation({\r\n      query: (payload) => ({\r\n        url: `${backendUrl}/cart/${payload.id}`,\r\n        method: \"PUT\",\r\n        body: {\r\n          count: payload.count,\r\n        },\r\n      }),\r\n      invalidatesTags: [\"cartItems\"],\r\n    }),\r\n    addToCart: builder.mutation({\r\n      query: (payload) => ({\r\n        url: `${backendUrl}/cart/`,\r\n        body: { items: payload },\r\n        method: \"POST\",\r\n      }),\r\n      invalidatesTags: [\"cartItems\"],\r\n    }),\r\n  }),\r\n});\r\n\r\n// export const { useGetAllCartsQuery, useLazyGetAllCartsQuery, useUpdateQuantityMutation } = cartApi;\r\n\r\n// }),\r\n// });\r\n\r\nexport const {\r\n  useGetAllCartsQuery,\r\n  useLazyGetAllCartsQuery,\r\n  useAddToCartMutation,\r\n  useDeleteFromCartMutation,\r\n  useDeleteAllCartMutation,\r\n  useUpdateQuantityMutation,\r\n  // useClearCartMutation,\r\n  // useVerifyCartMutation,\r\n} = cartApi;\r\nexport default cartApi;\r\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,cAAc,KAAQ,8BAA8B,CAExE,OAASC,OAAO,KAAQ,kBAAkB,CAE1C,KAAM,CAAAC,UAAU,CAAGD,OAAO,CAACE,UAAU,CAErC,KAAM,CAAAC,OAAO,CAAGL,SAAS,CAAC,CACxBM,WAAW,CAAE,WAAW,CACxBC,SAAS,CAAEN,cAAc,CAAC,CACxBC,OAAO,CAAE,GAAGM,OAAO,CAACC,GAAG,CAACC,kBAAkB,EAAE,CAC5CC,cAAc,CAAGC,OAAO,EAAK,CAC3B;AACA,GAAIC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAE,CACxCF,OAAO,CAACG,GAAG,CACT,eAAe,CACf,UAAUF,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,EAChD,CAAC,CACH,CAEA,MAAO,CAAAF,OAAO,CAChB,CACF,CAAC,CAAC,CACFI,SAAS,CAAGC,OAAO,GAAM,CACvBC,WAAW,CAAED,OAAO,CAACE,KAAK,CAAC,CACzBA,KAAK,CAAEA,CAAA,GAAM,GAAGhB,UAAU,OAAO,CACjCiB,YAAY,CAAE,CAAC,WAAW,CAC5B,CAAC,CAAC,CAEFC,cAAc,CAAEJ,OAAO,CAACK,QAAQ,CAAC,CAC/BH,KAAK,CAAGI,EAAE,GAAM,CACdC,GAAG,CAAE,GAAGrB,UAAU,SAASoB,EAAE,EAAE,CAC/BE,MAAM,CAAE,QACV,CAAC,CAAC,CACFC,eAAe,CAAE,CAAC,WAAW,CAC/B,CAAC,CAAC,CACFC,aAAa,CAAEV,OAAO,CAACK,QAAQ,CAAC,CAC9BH,KAAK,CAAEA,CAAA,IAAO,CACZK,GAAG,CAAE,GAAGrB,UAAU,QAAQ,CAC1BsB,MAAM,CAAE,QACV,CAAC,CAAC,CACFC,eAAe,CAAE,CAAC,WAAW,CAC/B,CAAC,CAAC,CACFE,cAAc,CAAEX,OAAO,CAACK,QAAQ,CAAC,CAC/BH,KAAK,CAAGU,OAAO,GAAM,CACnBL,GAAG,CAAE,GAAGrB,UAAU,SAAS0B,OAAO,CAACN,EAAE,EAAE,CACvCE,MAAM,CAAE,KAAK,CACbK,IAAI,CAAE,CACJC,KAAK,CAAEF,OAAO,CAACE,KACjB,CACF,CAAC,CAAC,CACFL,eAAe,CAAE,CAAC,WAAW,CAC/B,CAAC,CAAC,CACFM,SAAS,CAAEf,OAAO,CAACK,QAAQ,CAAC,CAC1BH,KAAK,CAAGU,OAAO,GAAM,CACnBL,GAAG,CAAE,GAAGrB,UAAU,QAAQ,CAC1B2B,IAAI,CAAE,CAAEG,KAAK,CAAEJ,OAAQ,CAAC,CACxBJ,MAAM,CAAE,MACV,CAAC,CAAC,CACFC,eAAe,CAAE,CAAC,WAAW,CAC/B,CAAC,CACH,CAAC,CACH,CAAC,CAAC,CAEF;AAEA;AACA;AAEA,MAAO,MAAM,CACXQ,mBAAmB,CACnBC,uBAAuB,CACvBC,oBAAoB,CACpBC,yBAAyB,CACzBC,wBAAwB,CACxBC,yBACA;AACA;AACF,CAAC,CAAGlC,OAAO,CACX,cAAe,CAAAA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}