{"version":3,"file":"static/js/724.f3937904.chunk.js","mappings":"2LAKA,MAAMA,EAAaC,EAAAA,EAAQC,WACZ,SAASC,IACtBC,QAAQC,IAAI,oCACZ,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,OAC5BK,EAAOC,IAAYN,EAAAA,EAAAA,WACxB,IAAMO,KAAKC,KAAKC,OAAOC,WAAa,MAAQ,IAExCC,GAAWC,EAAAA,EAAAA,MA8BjB,IA5BAC,EAAAA,EAAAA,YAAU,KACaC,WACnB,IAAK,IAADC,EAAAC,EACF,MAAMC,QAAiBC,EAAAA,EAASC,IAAI,GAAG3B,WAAqB,CAC1D4B,OAAQ,CAAEC,MAAO,MAEnBtB,GAAkB,OAARkB,QAAQ,IAARA,GAAc,QAANF,EAARE,EAAUK,YAAI,IAAAP,GAAM,QAANC,EAAdD,EAAgBO,YAAI,IAAAN,OAAZ,EAARA,EAAsBlB,SAAU,GAC5C,CAAE,MAAOyB,GACP3B,QAAQO,MAAM,2BAA4BoB,GAC1CnB,EAASmB,EACX,CAAC,QACCrB,GAAW,EACb,GAGFsB,EAAc,GACb,KAGHX,EAAAA,EAAAA,YAAU,KACR,MAAMY,EAAeA,KACnBnB,EAASC,KAAKC,KAAKC,OAAOC,WAAa,KAAK,EAI9C,OADAD,OAAOiB,iBAAiB,SAAUD,GAC3B,IAAMhB,OAAOkB,oBAAoB,SAAUF,EAAa,GAC9D,IAECxB,EACF,OAAO2B,EAAAA,EAAAA,KAAA,OAAAC,SAAK,eAGd,GAAI1B,EACF,OAAOyB,EAAAA,EAAAA,KAAA,OAAAC,SAAK,0BAGd,MAAMC,EAAcvB,KAAKC,KAAKH,IAAe,OAANP,QAAM,IAANA,OAAM,EAANA,EAAQiC,SAAU,IAGnDC,EAAY,IAAIC,OAAOH,GAAe,GAAK,IAAII,SAAQ,IAAMpC,IAEnE,OACE8B,EAAAA,EAAAA,KAAA,WAASO,MAAM,UAASN,UACtBD,EAAAA,EAAAA,KAAA,OAAKO,MAAM,UAASN,UAClBD,EAAAA,EAAAA,KAAA,OAAKO,MAAM,iBAAgBN,SAClB,OAAN/B,QAAM,IAANA,GAAAA,EAAQiC,OACLC,EAAUI,KAAI,CAAAC,EAAuBC,KAAK,IAA3B,OAAEC,EAAM,KAAEC,EAAI,GAAEC,GAAIJ,EAAA,OACjCT,EAAAA,EAAAA,KAAA,OAEEc,IAAKH,EAAO,GACZI,IAAKH,EACLI,MAAO,CACLC,OAAQ,UACRC,UAAW,UACXC,eAAgB,UAElBC,QAASA,KACPrC,EAAS,mBAAmB8B,IAAK,GAT9BH,EAWL,IAEJ,UAKd,C","sources":["components/Home/BrandsSwiper.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport instance from \"../../utils/interceptor\";\nimport \"./style.css\";\nimport { baseUrl } from \"../../utils/baseUrl\";\nconst backendUrl = baseUrl.production;\nexport default function BrandsSwiper() {\n  console.log(\"brandSwiper 2 component rendered\");\n  const [brands, setBrands] = useState([]);\n  const [loading, setLoading] = useState(true); // To handle the loading state\n  const [error, setError] = useState(null);\n  const [limit, setLimit] = useState(\n    () => Math.ceil(window.innerWidth / 300) || 1\n  );\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchBanners = async () => {\n      try {\n        const response = await instance.get(`${backendUrl}/brands`, {\n          params: { items: 50 },\n        });\n        setBrands(response?.data?.data?.brands || []);\n      } catch (err) {\n        console.error(\"Failed to fetch banners:\", err);\n        setError(err); // Notify the error if needed\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchBanners();\n  }, []);\n\n  // Update the limit on window resize\n  useEffect(() => {\n    const handleResize = () => {\n      setLimit(Math.ceil(window.innerWidth / 300));\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  if (loading) {\n    return <div>Loading...</div>; // Show a loading indicator\n  }\n\n  if (error) {\n    return <div>Error loading banners</div>; // Show an error message\n  }\n\n  const repeatCount = Math.ceil(limit / (brands?.length || 1));\n\n  // Create a new array with the repeated brandshome\n  const newBrands = [...Array((repeatCount || 1) + 3)].flatMap(() => brands);\n\n  return (\n    <article class=\"wrapper\">\n      <div class=\"marquee\">\n        <div class=\"marquee__group\">\n          {brands?.length\n            ? newBrands.map(({ images, name, id }, index) => (\n                <img\n                  key={index}\n                  src={images[0]}\n                  alt={name}\n                  style={{\n                    cursor: \"pointer\",\n                    objectFit: \"contain\",\n                    objectPosition: \"center\",\n                  }}\n                  onClick={() => {\n                    navigate(`search/?brandId=${id}`);\n                  }}\n                />\n              ))\n            : null}\n        </div>\n      </div>\n    </article>\n  );\n}\n\n{\n  /* <Swiper\nclassName=\"mySwiper\"\nslidesPerView={limit}\nspeed={10000}\nautoplay={{ <marquee ref={marqueeRef} direction=\"left\">\n    \n    </marquee>\n  delay: 0,\n  disableOnInteraction: false,\n}}\nmodules={[Autoplay, Pagination, Navigation]}\n// pagination={{ clickable: true }}\nloop={true}\n>\n<div className=\"swiper-container\" style={{ width: \"100%\" }}>\n  {brands?.length\n    ? newBrands.map(({ images, name, id }, index) => (\n        <SwiperSlide\n          key={index}\n          style={{\n            width: \"fit-content !important\",\n          }}\n        >\n          <div style={{ width: \"250px\", height: \"150px\" }}>\n            <img\n              src={images[0]}\n              alt={name}\n              style={{\n                cursor: \"pointer\",\n                objectFit: \"contain\",\n                objectPosition: \"center\",\n              }}\n              onClick={() => {\n                navigate(`search/?brandId=${id}`);\n              }}\n            />\n          </div>\n        </SwiperSlide>\n      ))\n    : null}\n</div>\n</Swiper> */\n}\n"],"names":["backendUrl","baseUrl","production","BrandsSwiper","console","log","brands","setBrands","useState","loading","setLoading","error","setError","limit","setLimit","Math","ceil","window","innerWidth","navigate","useNavigate","useEffect","async","_response$data","_response$data$data","response","instance","get","params","items","data","err","fetchBanners","handleResize","addEventListener","removeEventListener","_jsx","children","repeatCount","length","newBrands","Array","flatMap","class","map","_ref","index","images","name","id","src","alt","style","cursor","objectFit","objectPosition","onClick"],"sourceRoot":""}